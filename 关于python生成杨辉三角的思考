def triangles():
    list1=[1]
    while True:
        #list[:]表示取该数组的副本
        yield list1[:]
        print(id(list1))
        list1.append(0)
        print(id(list1))
        list1=[list1[i]+list1[i-1] for i in range(len(list1))]
        print(id(list1))

yield 返回的其实是一个内存地址。

如果直接yield 返回L，是返回了L所在的内存地址。

会多一个零的原因就在这里，下一步执行的L.append(0)，是修改了L的数据，但是内存地址没有变。



当使用L=[……]时，L不仅数据改变了，L的内存地址也发生了改变。

如果不好理解，可以使用id()来查看内存地址，或许会更好理解：

def triangles():

    list1=[1]

    while True:

        #list[:]表示取该数组的副本，等同于楼主使用b来接收

        yield list1[:]

        print(id(list1))

        list1.append(0)

        print(id(list1))

        list1=[list1[i]+list1[i-1] for i in range(len(list1))]

        print(id(list1))







调用时：

输出的结果

2633347695232

2633347695232

2633347734656

2633347734656

2633347734656

2633347734528

2633347734528

2633347734528

2633347731776

2633347731776

2633347731776

2633345188864

2633345188864

2633345188864

2633347734464

2633347734464

2633347734464

2633347734912

2633347734912

2633347734912

2633347753984

2633347753984

2633347753984

2633347754112

2633347754112

2633347753792



可以看到.append后，内存地址没有改变（.append之前为2633347695232，改之后也为2633347695232）

所以应该是：当输出时，list的数据已经被修改了。









